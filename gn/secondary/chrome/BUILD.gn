# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//crypto/ssl/flags.gni")
import("//tools/grit/grit_rule.gni")

executable("chrome") {
  sources = [
    "app/breakpad_field_trial_win.cc",
    "app/breakpad_field_trial_win.h",
    "app/breakpad_win.cc",
    "app/breakpad_win.h",
    "app/chrome_dll_resource.h",
    "app/chrome_exe_main_aura.cc",
    "app/chrome_exe_main_gtk.cc",
    "app/chrome_exe_main_mac.cc",
    "app/chrome_exe_main_win.cc",
    "app/chrome_exe_resource.h",
    "app/chrome_main.cc",
    "app/chrome_main_delegate.cc",
    "app/chrome_main_delegate.h",
    "app/client_util.cc",
    "app/client_util.h",
    "app/hard_error_handler_win.cc",
    "app/hard_error_handler_win.h",
    "app/metro_driver_win.cc",
    "app/metro_driver_win.h",
    "../content/app/startup_helper_win.cc",
  ]

  configs += [
    # TODO(brettw) this is wrong, it should be picked up from deps.
    "//build/config/linux:gtk",
    "//build/config/linux:x11",
  ]

  deps = [
    # TODO(brettw) this is right on linux? Everything is linked into the
    # exe, but wrong on Windows, where chrome_exe and chrome_dll are separate.
    ":browser",
    ":common",
    ":debugger",
    ":plugin",
    ":renderer",
    ":utility",
    "//base",
  ]

  # TODO(brettw) this isn't right for all platforms.
  if (!use_aura) {
    sources -= "app/chrome_exe_main_aura.cc"
  }

  if (!is_win) {
    sources -= [
      "app/client_util.cc",
      "app/client_util.h",
    ]
  }
}

static_library("browser") {
  external = true

  if (is_linux) {
    ldflags = [ "-ldl" ]
    if (toolkit_uses_gtk) {
      ldflags += "-lgconf-2"
    }
  }
  configs += [
    "//build/config/linux:x11",
  ]

  deps = [
    "//third_party/expat",
  ]
}

static_library("common") {
  external = true

  if (use_nss && is_linux) {
    # common/net uses NSS.
    # TODO(brettw) have a better way to express this without having to do
    # "if (use_nss)" everywhere.
    configs += "//third_party/nss:nss_linux_config"
  }
  deps = [
  ]
}

# TODO(brettw) move to browser/devtools/BUILD.gn
static_library("debugger") {
  sources = [
    "browser/devtools/adb/android_rsa.cc",
    "browser/devtools/adb/android_rsa.h",
    "browser/devtools/adb/android_usb_device.cc",
    "browser/devtools/adb/android_usb_device.h",
    "browser/devtools/adb/android_usb_socket.cc",
    "browser/devtools/adb/android_usb_socket.h",
    "browser/devtools/adb_client_socket.cc",
    "browser/devtools/adb_client_socket.h",
    "browser/devtools/adb_web_socket.cc",
    "browser/devtools/adb_web_socket.h",
    "browser/devtools/browser_list_tabcontents_provider.cc",
    "browser/devtools/browser_list_tabcontents_provider.h",
    "browser/devtools/devtools_adb_bridge.cc",
    "browser/devtools/devtools_adb_bridge.h",
    "browser/devtools/devtools_embedder_message_dispatcher.cc",
    "browser/devtools/devtools_embedder_message_dispatcher.h",
    "browser/devtools/devtools_file_helper.cc",
    "browser/devtools/devtools_file_helper.h",
    "browser/devtools/devtools_file_system_indexer.cc",
    "browser/devtools/devtools_file_system_indexer.h",
    "browser/devtools/devtools_protocol.cc",
    "browser/devtools/devtools_protocol.h",
    "browser/devtools/devtools_toggle_action.h",
    "browser/devtools/devtools_window.cc",
    "browser/devtools/devtools_window.h",
    "browser/devtools/port_forwarding_controller.cc",
    "browser/devtools/port_forwarding_controller.h",
    "browser/devtools/remote_debugging_server.cc",
    "browser/devtools/remote_debugging_server.h",
  ]

  deps = [
    "//base",
    "//net",
    "//net:http_server",
    "//skia",
    "//third_party/icu:icui18n",
    "//third_party/icu:icuuc",
    "//third_party/leveldatabase",
    "//third_party/libusb",
  ]

  if (is_android) {
    sources -= [
      "browser/devtools/adb/android_rsa.cc",
      "browser/devtools/browser_list_tabcontents_provider.cc",
      "browser/devtools/devtools_file_system_indexer.cc",
      "browser/devtools/devtools_window.cc",
      "browser/devtools/remote_debugging_server.cc",
    ]
    deps -= "//third_party/libusb"
  }

  # TODO implement debug_devtools
  # if (debug_devtools) {
  #   defines = [ "DEBUG_DEVTOOLS=1" ]
  # }
  # TODO(brettw) this may be required on Windows:
  # if (is_win) {
  #   TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
  #   'msvs_disabled_warnings': [ 4267, ]
  # }

}

static_library("plugin") {
  external = true
}

static_library("renderer") {
  external = true
}

static_library("utility") {
  external = true
}

# Resources --------------------------------------------------------------------

group("chrome_resources") {
  deps = [
    ":browser_resources",
    ":common_resources",
    ":renderer_resources",
  ]
}
grit("browser_resources") {
  external = true
  source = "browser/browser_resources.grd"
}
grit("common_resources") {
  external = true
  source = "common/common_resources.grd"
}
grit("renderer_resources") {
  external = true
  source = "renderer/resources/renderer_resources.grd"
}

group("chrome_strings") {
  deps = [
    ":locale_settings",
    ":chromium_strings",
    ":generated_resources",
    ":google_chrome_strings",
  ]
}
grit("locale_settings") {
  external = true
  source = "app/resources/locale_settings.grd"
}
grit("chromium_strings") {
  external = true
  source = "app/chromium_strings.grd"
}
grit("generated_resources") {
  external = true
  source = "app/generated_resources.grd"
}
grit("google_chrome_strings") {
  external = true
  source = "app/google_chrome_strings.grd"
}

group("chrome_extra_resources") {
  deps = [
    ":memory_internals_resources",
    ":net_internals_resources",
    ":signin_internals_resources",
    ":sync_internals_resources",
    ":translate_internals_resources",
  ]
}
grit("memory_internals_resources") {
  external = true
  source = "browser/resources/memory_internals_resources.grd"
}
grit("net_internals_resources") {
  external = true
  source = "browser/resources/net_internals_resources.grd"
}
grit("signin_internals_resources") {
  external = true
  source = "browser/resources/signin_internals_resources.grd"
}
grit("sync_internals_resources") {
  external = true
  source = "browser/resources/sync_internals_resources.grd"
}
grit("translate_internals_resources") {
  external = true
  source = "browser/resources/translate_internals_resources.grd"
}

group("theme_resources") {
  deps = [
    ":app_theme_resources",
    #"//ui:ui_resources",
  ]
}
grit("app_theme_resources") {
  external = true
  source = "app/theme/theme_resources.grd"
}
